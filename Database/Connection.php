<?phpnamespace Flyf\Database;use \Flyf\Core\Config;/** * A database connection *  * Represents a connection to the database, on which queries * can be made. *  * @author Michael Valentin <mv@signifly.com> */class Connection {	private static $connection;	private $hostname;	private $username;	private $password;	private $database;	private $charset;		private $pdo;	private $statement;	private function __construct() {		$this->hostname = Config::GetValue("database_hostname");		$this->username = Config::GetValue("database_username");		$this->password = Config::GetValue("database_password");		$this->database = Config::GetValue("database_database");		$this->charset = Config::GetValue("database_charset");	}	/**	 * Get the database connection	 * 	 * Get the database connection for the current request.	 * Connections are handled by PDO. Only one connection	 * is used per request.	 */	public static function GetConnection() {		//TODO: What if we want to talk to an external database while still connected to our own database aswell?		if (!self::$connection) {			self::$connection = new Connection();			self::$connection->Connect();		}		return self::$connection;	}	/**	 * Connect to the database	 * 	 * Setup the connection. This is called automatically by the	 * GetConnection method, so it is usually not necessary to	 * call this function in your code.	 */	public function Connect() {		if (!$this->pdo) {			$this->pdo = new \PDO(				'mysql:host='.$this->hostname.';dbname='.$this->database.';', 				$this->username, 				$this->password,				array(						\PDO::ATTR_PERSISTENT => true				)			);			$this->pdo->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);		}	}	/**	 * Disconnect from the database	 */	public function Disconnect() {		$this->pdo = null;		$this->statement = null;		self::$connection = null;	}	/**	 * Prepare this query	 * 	 * Prepare the supplied query, ready for binding of parameters	 * 	 * @param String $query The query to prepare	 */	public function Prepare($query) {		$this->statement = $this->pdo->prepare($query);	}	/**	 * Execute the current query	 */	public function ExecuteQuery() {		$this->statement->execute();		return array(			'result' => $this->statement->fetchAll(\PDO::FETCH_ASSOC),			'last_insert_id' => 0,			'row_count' => $this->statement->rowCount(),		);	}		/**	 * Execute a query that does not return data	 */	public function ExecuteNonQuery() {		$this->statement->execute();		return array(			'result' => array(),			'last_insert_id' => $this->pdo->lastInsertID(),			'row_count' => $this->statement->rowCount(),		);	}	/**	 * Bind these parameters to the currently prepared statement	 * 	 * @param array $params The parameters to bind	 */	public function Bind(array $params) {		foreach ($params as $key => $value) {			$this->statement->bindValue($key, $value);		}	}}