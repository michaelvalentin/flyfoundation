<?php namespace Flyf\Database;class QueryBuilder {	private $type;	private $tables;	private $fields;	private $values;	private $conditions;	private $params;	private $offset;	private $limit;	private $orders;	private $groups;	private $result;	private $lastQuery;		private $connection;	public function __construct() {		$this->connection = Connection::GetConnection();			$this->Clear();	}	private function Clear() {		$this->type = 'select';		$this->tables = array();		$this->fields = array();		$this->conditions = array();		$this->params = array();		$this->offset = null;		$this->limit = null;		$this->orders = array();		$this->groups = array();	}	/* Type methods */	public function SetType($type) {		if (in_array(strtolower($type), array('select', 'insert', 'update', 'delete'))) {			$this->type = $type;		} else {			throw new \Flyf\Exceptions\InvalidArgumentException('Type was '.$type.', but must be either select, insert, update or delete');		}	}	/* Table methods */	public function SetTables($tables) {		if (is_array($tables)) {			$this->tables = $tables;		}	}	public function SetTable($table) {		$this->tables = array($table);	}	public function AddTables($tables) {		if (is_array($tables)) {			$this->tables = array_merge($this->tables, $tables);		}	}	public function AddTable($table) {		$this->tables[] = $table;	}	/* Field methods */	public function SetFields($fields) {		if (is_array($fields)) {			$this->fields = $fields;		}	}	public function AddFields($fields) {		if (is_array($fields)) {			$this->fields = array_merge($this->fields, $fields);		}	}	public function AddField($field) {		$this->fields[] = $field;	}	/* Value methods */	public function SetValues($values) {		if (is_array($values)) {			$this->values = $values;		}	}	/* Condition methods */ 	public function AddCondition($condition, $index = null) {		$index !== null ? $this->conditions[$index] = $condition : $this->conditions[] = $condition;	}	public function RemoveCondition($index) {		$this->conditions[$index] = null;		unset($this->conditions[$index]);	}	/* Param methods */	public function BindParams($params) {		foreach ($params as $key => $value) {			$this->bindParam($key, $value);		}	}	public function BindParam($key, $value) {		$this->params[$key[0] !== ':' ? ':'.$key : $key] = $value;	}	/* Limit and offset methods */	public function SetLimit($limit) {		$this->limit = is_numeric($limit) ? $limit : $this->limit;	}	public function SetOffset($offset) {		$this->offset = is_numeric($offset) ? $offset : $this->offset;	}	/* Order and direction methods */	public function AddOrder($field, $dir = 'asc', $index = null) {		if (in_array(strtolower($dir), array('asc', 'desc'))) {			$index !== null ? $this->orders[$index] = array($field, $dir) : $this->orders[] = array($field, $dir);		} else {			throw new \Flyf\Exceptions\InvalidArgumentException('Direction was '.$dir.', but must be either asc or desc.');					}	}	public function RemoveOrder($index) {		$this->orders[$index] = null;		unset($this->orders[$index]);	}		/* Group methods */	public function AddGroup($field, $index = null) {		$index !== null ? $this->groups[$index] = array($field) : $this->groups[] = array($field);	}	public function RemoveGroup($index) {		$this->groups[$index] = null;		unset($this->groups[$index]);	}			/* Assemble methods */	private function AssembleSelect() {		$query = 'SELECT SQL_CALC_FOUND_ROWS ';		foreach ($this->fields as $field) {			$query .= '`'.$field.'`, ';		}		$query = substr($query, 0, -2).' FROM ';		foreach ($this->tables as $table) {			$query .= '`'.$table.'`, ';		}		$query = substr($query, 0, -2).' ';		if ($count = count($this->conditions)) {			$query .= 'WHERE ';			$x = 1;			foreach ($this->conditions as $condition) {				$query .= '('.$this->escapeCondition($condition).')';				$query = ($x == $count) ? $query.' ' : $query.' AND ';				$x++;			}		}		if ($count = count($this->groups)) {			$query .= 'GROUP BY ';			$x = 1;			foreach ($this->groups as $field) {				$query .= '`'.$this->escape($field).'`';				$query = ($x == $count) ? $query.' ' : $query.', ';				$x++;			}		}		if ($count = count($this->orders)) {			$query .= 'ORDER BY ';			$x = 1;			foreach ($this->orders as $pair) {				$field = $pair[0]; $dir = $pair[1];				$query .= '`'.$this->escape($field).'` '.strtoupper($dir);				$query = ($x == $count) ? $query.' ' : $query.', ';				$x++;			}		}		if ($this->limit) {			$query .= 'LIMIT '.$this->limit.' ';		}		if ($this->offset) {			$query .= 'OFFSET '.$this->offset.' ';		}		return $query; 	}	private function AssembleInsert() {		$query = 'INSERT INTO ';		foreach ($this->tables as $table) {			$query .= '`'.$table.'`, ';		}		$query = substr($query, 0, -2).' (';		foreach ($this->fields as $field) {			$query .= '`'.$field.'`, ';		}		$query = substr($query, 0, -2).') ';		$query .= 'VALUES (';				foreach ($this->values as $value) {			$query .= is_numeric($value) ? $value.', ' : '\''.$this->escape($value).'\', ';		}		$query = substr($query, 0, -2).') ';		return $query;	}	private function AssembleUpdate() {		$query = 'UPDATE ';		foreach ($this->tables as $table) {			$query .= '`'.$table.'`, ';		}		$query = substr($query, 0, -2).' ';		$query .= 'SET ';		for ($x = 0; $x < ($count = count($this->fields)); $x++) {			$field = $this->fields[$x]; $value = $this->values[$x];						$query .= '`'.$field.'` = '.(is_numeric($value) ? $value.', ' : '\''.$this->escape($value).'\', ');		}		$query = substr($query, 0, -2).' ';				if ($count = count($this->conditions)) {			$query .= 'WHERE ';			$x = 1;			foreach ($this->conditions as $condition) {				$query .= '('.$this->escapeCondition($condition).')';				$query = ($x == $count) ? $query.' ' : $query.' AND ';				$x++;			}		}		if ($this->limit) {			$query .= 'LIMIT '.$this->limit.' ';		}		return $query;	}	private function AssembleDelete() {		$query = 'DELETE FROM ';		foreach ($this->tables as $table) {			$query .= '`'.$table.'`, ';		}		$query = substr($query, 0, -2).' ';		if ($count = count($this->conditions)) {			$query .= 'WHERE ';			$x = 1;			foreach ($this->conditions as $condition) {				$query .= '('.$this->escapeCondition($condition).')';				$query = ($x == $count) ? $query.' ' : $query.' AND ';				$x++;			}		} else {			$query .= 'WHERE MISSING '; // Can this be removed safely?						throw new \Flyf\Exceptions\DangerousQueryException("Creation of sql delete-statement without where-conditions.");		}		if ($this->limit) {			$query .= 'LIMIT '.$this->limit.' ';		}		return $query;	}	public function Execute() {		$method = 'Assemble'.ucfirst($this->type);		$query = $this->lastQuery = $this->$method();		$type = $this->type;		$this->connection->Prepare($query);		$this->connection->Bind($this->params);			$this->Clear();		$this->result = ($type == 'select') ? $this->connection->ExecuteQuery() : $this->connection->ExecuteNonQuery();		switch ($type) {			case 'select': return $this->result['result']; break;			case 'insert': return $this->result['last_insert_id']; break;			case 'update': return $this->result['row_count']; break;			case 'delete': return $this->result['row_count']; break;			default: return null; break;		}	}	public function GetLastQuery() {		return $this->lastQuery;	}	public function GetRowCount() {		return $this->result['row_count'];	}	public function GetRowCountTotal() {		$this->connection->Prepare('SELECT FOUND_ROWS() as row_count_total');		$result = $this->connection->ExecuteQuery();		return $result['result'][0]['row_count_total'];	}		private function EscapeCondition($string) {		// old: (?:`)?([a-zA-Z_]+?)(?:`)?(?:\ )?(=|!=|<|>|>=|<=|NOT)(?:\ )?(?:\')?([^\:^\']+?)(?:\')?(\(|\)|\ |\Z)		return preg_replace('/(?:`)?([a-zA-Z_]+?)(?:`)?(?:\ )?(=|!=|<|>|>=|<=|NOT)(?:\ )?\'(.+?)\'(\(|\)|\ |\Z)/ismue', "'`\\1` \\2 \''.mysql_real_escape_string('\\3').'\'\\4'", $string);	}	private function Escape($data) {		if (is_array($data)) {			foreach ($data as $key => $value) {				$data[$key] = mysql_real_escape_string($value);			}		} else {			$data = mysql_real_escape_string($data);		}		return $data;	}}?>