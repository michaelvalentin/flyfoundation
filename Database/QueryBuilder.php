<?php class Flyf_Database_QueryBuilder {	private $type;	private $tables;	private $fields;	private $values;	private $conditions;	private $params;	private $offset;	private $limit;	private $orders;	private $groups;	private $last_query;	private $last_error;		private $result;	private $connection;	public function __construct() {		$this->connection = Flyf::registry('flyf_database_connection');			$this->clear();	}	private function clear() {		$this->type = 'select';		$this->tables = array();		$this->fields = array();		$this->conditions = array();		$this->params = array();		$this->offset = null;		$this->limit = null;		$this->orders = array();		$this->groups = array();	}	/* Type methods */	public function setType($type) {		$this->type = in_array(strtolower($type), array('select', 'insert', 'update', 'delete')) ? $type : 'select';	}	/* Table methods */	public function setTables($tables) {		if (is_array($tables)) {			$this->tables = $tables;		}	}	public function setTable($table) {		$this->tables = array($table);	}	public function addTables($tables) {		if (is_array($tables)) {			$this->tables = array_merge($this->tables, $tables);		}	}	public function addTable($table) {		$this->tables[] = $table;	}	/* Field methods */	public function setFields($fields) {		if (is_array($fields)) {			$this->fields = $fields;		}	}	public function addFields($fields) {		if (is_array($fields)) {			$this->fields = array_merge($this->fields, $fields);		}	}	public function addField($field) {		$this->fields[] = $field;	}	/* Value methods */	public function setValues($values) {		if (is_array($values)) {			$this->values = $values;		}	}	/* Condition methods */ 	public function addCondition($condition, $bind = 'and', $index = '') {		$bind = in_array(strtolower($bind), array('and', 'or', '&&', '||')) ? $bind : 'and';				if ($index != '') {			$this->conditions[$index] = array($condition, $bind);		} else {			$this->conditions[] = array($condition, $bind);		}	}	public function removeCondition($index) {		if (isset($this->conditions[$index])) {			$this->conditions[$index] = null;			unset($this->conditions[$index]);		}	}	/* Param methods */	public function bindParams($params) {		foreach ($params as $key => $value) {			$this->bindParam($key, $value);		}	}	public function bindParam($key, $value) {		$this->params[$key[0] !== ':' ? ':'.$key : $key] = $value;	}	/* Limit and offset methods */	public function setLimit($limit) {		$this->limit = is_numeric($limit) ? $limit : $this->limit;	}	public function setOffset($offset) {		$this->offset = is_numeric($offset) ? $offset : $this->offset;	}	/* Order and direction methods */	public function addOrder($field, $dir = 'asc', $index = '') {		$dir = in_array(strtolower($dir), array('asc', 'desc')) ? $dir : 'asc';		if ($index != '') {			$this->orders[$index] = array($field, $dir);		} else {			$this->orders[] = array($field, $dir);		}	}	public function removeOrder($index) {		if (isset($this->orders[$index])) {			$this->orders[$index] = null;			unset($this->orders[$index]);		}	}		/* Group methods */	public function addGroup($field, $index = '') {		if ($index != '') {			$this->groups[$index] = array($field);		} else {			$this->groups[] = array($field);		}	}	public function removeGroup($index) {		if (isset($this->groups[$index])) {			$this->groups[$index] = null;			unset($this->groups[$index]);		}	}			/* Assemble methods */	private function assembleSelect() {		$query = 'SELECT SQL_CALC_FOUND_ROWS ';		foreach ($this->fields as $field) {			$query .= '`'.$field.'`, ';		}		$query = substr($query, 0, -2).' FROM ';		foreach ($this->tables as $table) {			$query .= '`'.$table.'`, ';		}		$query = substr($query, 0, -2).' ';		if ($count = count($this->conditions)) {			$query .= 'WHERE ';			$x = 1;			foreach ($this->conditions as $pair) {				$condition = $pair[0]; $bind = $pair[1];				$query .= '('.$this->escapeCondition($condition).')';				$query = ($x == $count) ? $query.' ' : $query.' '.strtoupper($bind).' ';				$x++;			}		}		if ($count = count($this->groups)) {			$query .= 'GROUP BY ';			$x = 1;			foreach ($this->groups as $field) {				$query .= '`'.$this->escape($field).'`';				$query = ($x == $count) ? $query.' ' : $query.', ';				$x++;			}		}		if ($count = count($this->orders)) {			$query .= 'ORDER BY ';			$x = 1;			foreach ($this->orders as $pair) {				$field = $pair[0]; $dir = $pair[1];				$query .= '`'.$this->escape($field).'` '.strtoupper($dir);				$query = ($x == $count) ? $query.' ' : $query.', ';				$x++;			}		}		if ($this->limit) {			$query .= 'LIMIT '.$this->limit.' ';		}		if ($this->offset) {			$query .= 'OFFSET '.$this->offset.' ';		}		return $query; 	}	private function assembleInsert() {		$query = 'INSERT INTO ';		foreach ($this->tables as $table) {			$query .= '`'.$table.'`, ';		}		$query = substr($query, 0, -2).' (';		foreach ($this->fields as $field) {			$query .= '`'.$field.'`, ';		}		$query = substr($query, 0, -2).') ';		$query .= 'VALUES (';				foreach ($this->values as $value) {			$query .= is_numeric($value) ? $value.', ' : '\''.$this->escape($value).'\', ';		}		$query = substr($query, 0, -2).') ';		return $query;	}	private function assembleUpdate() {		$query = 'UPDATE ';		foreach ($this->tables as $table) {			$query .= '`'.$table.'`, ';		}		$query = substr($query, 0, -2).' ';		$query .= 'SET ';		for ($x = 0; $x < ($count = count($this->fields)); $x++) {			$field = $this->fields[$x]; $value = $this->values[$x];						$query .= '`'.$field.'` = '.(is_numeric($value) ? $value.', ' : '\''.$this->escape($value).'\', ');		}		$query = substr($query, 0, -2).' ';				if ($count = count($this->conditions)) {			$query .= 'WHERE ';			$x = 1;			foreach ($this->conditions as $pair) {				$condition = $pair[0]; $bind = $pair[1];				$query .= '('.$this->escapeCondition($condition).')';				$query = ($x == $count) ? $query.' ' : $query.' '.strtoupper($bind).' ';				$x++;			}		}		if ($this->limit) {			$query .= 'LIMIT '.$this->limit.' ';		}		return $query;	}	private function assembleDelete() {		$query = 'DELETE FROM ';		foreach ($this->tables as $table) {			$query .= '`'.$table.'`, ';		}		$query = substr($query, 0, -2).' ';		if ($count = count($this->conditions)) {			$query .= 'WHERE ';			$x = 1;			foreach ($this->conditions as $pair) {				$condition = $pair[0]; $bind = $pair[1];				$query .= '('.$this->escapeCondition($condition).')';				$query = ($x == $count) ? $query.' ' : $query.' '.strtoupper($bind).' ';				$x++;			}		} else {			$query .= 'WHERE MISSING ';		}		if ($this->limit) {			$query .= 'LIMIT '.$this->limit.' ';		}		return $query;	}	public function execute() {		$method = 'assemble'.ucfirst($this->type);		$query = $this->last_query = $this->$method();		$type = $this->type;		$this->connection->prepare($query);		$this->connection->bind($this->params);			$this->clear();			echo $query."\r\n";		if ($this->result = $this->connection->execute($type == 'select')) {			switch ($type) {				case 'select': return $this->result['result']; break;				case 'insert': return $this->result['last_insert_id']; break;				case 'update': return $this->result['row_count']; break;				case 'delete': return $this->result['row_count']; break;				default: return null; break;			}		} else {			echo $query; // Debug instead of echo		}	}	public function getLastQuery() {		return $this->last_query;	}	// TODO	public function getLastError() {		// implementation mangler	}	public function getRowCount() {		return $this->result['row_count'];	}	public function getRowCountTotal() {		$this->connection->prepare('SELECT FOUND_ROWS() as row_count_total');		$result = $this->connection->execute();		return $result['result'][0]['row_count_total'];	}		private function escapeCondition($string) {		return preg_replace('/(?:`)?([a-zA-Z_]+?)(?:`)?(?:\ )?(=|!=|<|>|>=|<=|NOT)(?:\ )?(?:\')?([^\:^\']+?)(?:\')?(\(|\)|\ |\Z)/ismue', "'`\\1` \\2 \''.mysql_real_escape_string('\\3').'\'\\4'", $string);	}	private function escape($data) {		if (is_array($data)) {			foreach ($data as $key => $value) {				$data[$key] = mysql_real_escape_string($value);			}		} else {			$data = mysql_real_escape_string($data);		}		return $data;	}}?>