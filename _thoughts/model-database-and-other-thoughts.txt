STRUCTURE for representing data-objects

model_name                  #Name of the model                                              #Indicated by file name
database_table_name         #What should the table be called (optional)                     #A setting
fields                      #Data fields of the model                                       #Can be collected
    name                    #Field name must be unique                                      #Default "line"
        type                #Object and database type                                       #Indicated along with name
        storage             #How is this stored (default: database)                         #Field settings
        translate           #Does it make sense to translate this field?                    #Field settings
        version             #Should this field be part of version?                          #Field settings
        access_control      #Should this field have separate access control?                #Field settings
validations                 #Things to validate. This also covers constraints...            #Field settings
    validation              #Wrapper
        type                #Type of validation
        fields              #What field(s) to use
        data                #Data for validation like RegExp or Number range "1-256"
        message             #Error message if validation is not met
relations                   #What relations does this model have?
    relation_name           #Relations must have a unique name
        relation_type       #What kind of relation? Has-Many, Has-A, In-Many-To-Many
        relation_model      #What other model does this relate to?
        local_fields        #By which local field(s) is this relation?
        relation_fields     #What fields in the related model is in the relation?
        match_type          #What kind of match is it (Database-stuff...)
        delete_strategy     #What delete strategy (database)
        update_strategy     #What update strategy (database)
options                     #Currently i can only think of AutoIncrement...
access_controls             #What action controls are related to this model?
    access_control          #Wrapper
        name                #Name eg. "read", "write", "show-secret-name"
indexes                     #What indexes exist?
    index                   #An index
        name                #What name should the index have?
        type                #What kind of index is it?
        fields              #What fields to include
            name            #What is the field name?
            length          #How long should it be?
            direction       #Ascending or descending?

####### EXAMPLE SYNTAX ########
AppName : CrazyBlog
Charset : UTF-8
Translate : false

!BlogPost
    //Options
    TableName : my_blog_posts
    UserEdit
    @PostToFacebook

    $Title:String
        Translate
        Version
        ~String
        #MinLength : 8
        #MaxLength : 255
        #RegExp "/^[a-zA-Z0-9\s]*$/"
            ErrorMessage : "Only letters a-z and numbers allowed."
        #Required

    $Alias:String
        Translate
        ~String
        #MinLength : 8
        #MaxLength : 100
        #Unique

    $Text:String
        Translate
        Version
        #Required
        ~SafeHtml

    <Image:Image
        Version
        OnUpdate : nothing
        OnDelete : cascade
        #Required

    <MainAuthor:User
        #Required
        @Write

    <>Authors:User

    >Comments:Comment

    $FirstLanguage:Language
        #Required
        @Read
        @Write

    $Published:DateTime
        @Write

!Author
    $Name:String


###############################
PREFIXES:
"nothing" : an option
!  : Class file
$  : Independendent, object variable
<  : Has a - "Points to a"    //The entity will point out towards something else..
>  : Has many - "These point to this"   //Something will point to the integer, the integer will spread out towards many..
<> : Many-to-many relation
#  : Validation
@  : Access Control
~  : Filter
&  :
%  :
?  :

MAKING DATABASE: -> This should get rid of problems with circular dependencies...
- Setup all tables with fields...
- Add table constraints
- Add relation constraints

DATABASE DATA in development and production
//System should make a log to track the model-version, which is incremented
- dev:
    o Structure is in code and version controlled / merged + options to easily add common stuff and dynamic structures
    o Structure is revised (if necessary) on every load -> Might have a switch for performance...
        - On update, save the last set of models as JSON in file and a DB-Dump.
            o NOT version-controlled / shared -> This reflects the current DB state locally!
        - Compare with previous set of models from file (no file = empty set...).
        - After the comparison we will have a number of models/fields/constraints/options respectively deleted and added
        - Start by deleting all the deleted once (First constraints, then fields)
        - Go on and add all the new ones (First fields, then constraints)
        - !!! Changing names on things should delete and create new... Data is ported manually...
            o Changing names is really rare -> So it's okay to require some extra effort
    o A demo-data script is saved to a specific location
        - Demo-data is saved or loaded easily through a dev-only dialog in browser..
        - A repo of backup's is kept
        - Demo-data consists of a PHP/Json structure and SQL data..
- prod / stage:
    o Can be done like dev (should be tested on staging clone first!!!)
    o An update script is in place, and takes care of the database...


