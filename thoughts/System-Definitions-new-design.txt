#Deriving the system model
- The system definitions are initialized with a textual/array (text-tree) set of data
- The system definintions are finalized before use
- Parsing from DSL to text-tree should be done seperately

##System model class design
- A system definition is a collection of definition components, the system definition a component itself
- Every system component contains a number of options and potentially a number of nested definition components
- A definition component is build by supplying one or more arrays of options
- The relevant definition component will validate the options as they receive them
- Before the definition component can be read, it must be finalized
- In finalizing the component, the relevant component will make sure that it's properties are valid

#System model properties and settings
- The core properties (options) with relevant apply methods, are the essential
  parts of the system definition.
- Additional info can be added as settings, but settings should follow this:
   * They are simple string/integer types
   * The system does not rely on them (a default value/behavior exist)
   * They do not come with any guarantees, and the finalization should not
     care about them

#Application architecture in relation to system definitions
- Generic classes, validators, forms, etc. react on system definition classes
  and hence do not need worry about the configuration or execution context
-