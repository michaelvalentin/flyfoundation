# New thoughts on the matter
Generic classes should be loaded through the factory, which can serve an actual
implementation if it exists or an override if one is configured. The generic
classes can also be seen as the components of the domain model. These are
characterized by only changing the function of the application and not of the
framework. The framework should not rely upon model classes.

Aspects such as Routing, E-mail, File operations, etc. which should be
configurable should be added as dependencies, which are indicated by dependency
traits and added to the object through the factory. For testing purposes these
can manually be set to mock objects.

This means we will only have to do "odd" testing for the factory / dependency
injector itself...

#General Factory
A class is loaded by:

 1 : Checking if there is any overrides for this class name -> load that if
     there is

 2 : Looking up the first implementation available in the paths specified in
     the configuration, in the order specified in the configuration

 3 : If there exists a specialized factory for this class name, apply it

 4 : If the class uses the environment, trait, make sure to pass environment
     variables on!


#Model Factory
A model class is loaded by:

 1 : If an explicit implementation of the model exists, use this

 2 : Otherwise use the generic entity

 3 : If the model is an instance of generic entity, try to load
     it's class definition, by stepping back in the inheritance chain, applying
     the earliest definition first and the later ones after

 4 : If this is a generic entity and no entity definitions can be found,
     then the class is not found :-(


#View Factory
A view class is loaded by:

 1 : If an explicit implementation of the model exists, use this

 2 : If an entity exists with this name, use a generic view with this
     definition

 3 : If no entity exists, use the default view


#Controller Factory
A controller class is loaded by:

 1 : If an explicit implementation of the controller exists, use this

 2 : Otherwise use the generic entity controller, with the name of the
     demanded controller as it's initiator

 3 : Try to locate an existing model, by stepping back in the inheritance chain
     until one appears. If none appears -> No problem :-)

 3b: The generic entity controller will need an entity to work properly, but
     this is not checked by the factory, and should give an error in the
     controller itself instead

 4 : Try to locate an existing view, by stepping back in the inheritance chain
     until one appears. If none appears -> No problem :-)


#DataMapper / DataFinder / DataMethods Factory
A data mapper is loaded like this:

 1 : Apply the DB Prefix and re-run the loading to include overrides and find
     the right top level implementation

 2 : If an explicit implementation of the model exists, use this

 3 : Otherwise go with the generic version if one exists

 4 : For generic versions, load the entity by name to get the definition

 5 : If no entity exists with this name


#EntityDefinition
Entity definitions are loaded by calling their respective entities. The entity
definitions are build as a part of the system-definitions on system build /
startup. The system-definition is a part of the configuration.


#Auto-specialization / Generics?
The ability to specialize a class without implementing an actual sub class,
leaving the sub classing to the very special cases, where peculiar calculations
are necessary.